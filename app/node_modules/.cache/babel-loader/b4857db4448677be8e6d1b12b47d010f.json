{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/App.js\";\nimport React from 'react';\nimport TodoForm from './components/TodoForm';\nimport Todo from './components/Todo';\nimport FooterBar from './components/FooterBar';\nimport { DB_CONFIG } from './config/config';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTodo = this.addTodo.bind(this);\n    this.updateFilter = this.updateFilter.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.toggleAll = this.toggleAll.bind(this);\n    this.toggleTodo = this.toggleTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.clearCompleted = this.clearCompleted.bind(this);\n    this.updateShow = this.updateShow.bind(this);\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('todos');\n    this.state = {\n      todos: [],\n      toggle: false,\n      filter: \"all\"\n    };\n  }\n\n  componentWillMount() {\n    var tasks = [];\n    this.database.on('value', snap => {\n      snap.forEach(childSnap => {\n        var task = {\n          'id': childSnap.key,\n          'title': childSnap.val().title,\n          'isCompleted': childSnap.val().isCompleted\n        };\n        tasks.push(task);\n      });\n      this.setState({\n        todos: tasks\n      });\n      tasks = [];\n    });\n  }\n\n  addTodo(taskName) {\n    const temp = {\n      title: taskName,\n      isCompleted: false\n    };\n    this.database.push(temp);\n  }\n\n  removeTodo(id) {\n    this.database.child(id).remove();\n  }\n\n  toggleAll() {\n    this.state.todos.map(todo => {\n      if (todo.isCompleted === this.state.toggle) {\n        var updateTodo = {\n          \"id\": todo.id,\n          \"title\": todo.title,\n          \"isCompleted\": !this.state.toggle\n        };\n        this.database.child(todo.id).update(updateTodo);\n      }\n\n      this.setState({\n        toggle: !this.state.toggle\n      });\n    });\n  }\n\n  toggleTodo(todo) {\n    const temp = {\n      'id': todo.id,\n      'title': todo.title,\n      'isCompleted': !todo.isCompleted\n    };\n    this.database.child(todo.id).update(temp);\n  }\n\n  updateTodo(todo, updatedName) {\n    var updateTodo = {\n      \"id\": todo.id,\n      \"title\": updatedName,\n      \"isCompleted\": todo.isCompleted\n    };\n    this.database.child(todo.id).update(updateTodo);\n  }\n\n  clearCompleted() {\n    this.state.todos.map(todo => {\n      if (todo.isCompleted) {\n        this.database.child(todo.id).remove();\n      }\n    });\n  }\n\n  updateShow(str) {\n    this.setState({\n      filter: str\n    });\n  }\n\n  updateFilter() {\n    var temp = [];\n\n    if (this.state.filter === \"all\") {\n      return this.state.todos;\n    } else if (this.state.filter === \"active\") {\n      this.state.todos.map(todo => {\n        if (!todo.isCompleted) {\n          temp.push(todo);\n        }\n      });\n      return temp;\n    } else if (this.state.filter === \"completed\") {\n      this.state.todos.map(todo => {\n        if (todo.isCompleted) {\n          temp.push(todo);\n        }\n      });\n      return temp;\n    }\n  }\n\n  render() {\n    let todos = this.state.todos;\n    let completedCount = 0;\n    this.state.todos.forEach(todo => {\n      if (todo.isCompleted) {\n        completedCount++;\n      }\n    });\n    let activeCount = this.state.todos.length - completedCount;\n    let totalCount = this.state.todos.length;\n    return React.createElement(\"section\", {\n      className: \"todoform\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(TodoForm, {\n      addTodo: this.addTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, todos.length > 0 && React.createElement(\"input\", {\n      id: \"toggle-all\",\n      className: \"toggle-all\",\n      type: \"checkbox\",\n      checked: activeCount === 0,\n      onChange: this.toggleAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"toggle-all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      className: \"todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, this.updateFilter().map(todo => {\n      return React.createElement(Todo, {\n        key: todo.id,\n        task: todo,\n        removeTodo: this.removeTodo,\n        toggleTodo: this.toggleTodo,\n        updateTodo: this.updateTodo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      });\n    }))), totalCount > 0 && React.createElement(FooterBar, {\n      activeCount: activeCount,\n      updateShow: this.updateShow,\n      completedCount: completedCount,\n      clearCompleted: this.clearCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/usr/src/app/src/App.js"],"names":["React","TodoForm","Todo","FooterBar","DB_CONFIG","firebase","App","Component","constructor","props","addTodo","bind","updateFilter","removeTodo","toggleAll","toggleTodo","updateTodo","clearCompleted","updateShow","app","initializeApp","database","ref","child","state","todos","toggle","filter","componentWillMount","tasks","on","snap","forEach","childSnap","task","key","val","title","isCompleted","push","setState","taskName","temp","id","remove","map","todo","update","updatedName","str","render","completedCount","activeCount","length","totalCount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TodoForm from './components/TodoForm'\nimport Todo from './components/Todo'\nimport FooterBar from './components/FooterBar'\nimport { DB_CONFIG } from './config/config'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\nimport './App.css'\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTodo = this.addTodo.bind(this);\n        this.updateFilter=this.updateFilter.bind(this);\n        this.removeTodo=this.removeTodo.bind(this);\n        this.toggleAll=this.toggleAll.bind(this);\n        this.toggleTodo=this.toggleTodo.bind(this);\n        this.updateTodo=this.updateTodo.bind(this);\n        this.clearCompleted=this.clearCompleted.bind(this);\n        this.updateShow=this.updateShow.bind(this);\n        this.app = firebase.initializeApp(DB_CONFIG);\n        this.database = this.app.database().ref().child('todos');\n        this.state = {\n                    todos: [],\n\n                    toggle: false,\n                    filter: \"all\"\n                    }\n\n    }\n        componentWillMount() {\n                var tasks = [];\n                this.database.on('value', (snap) => {\n\n                        snap.forEach((childSnap) => {\n\n                            var task = {\n                                'id': childSnap.key,\n                                'title': childSnap.val().title,\n                                'isCompleted': childSnap.val().isCompleted\n                            }\n                            tasks.push(task)\n                        });\n                        this.setState({todos: tasks});\n\n                        tasks = [];\n                    }\n                )\n\n    }\n\n\n\n    addTodo(taskName) {\n             const temp = {\n                 title: taskName,\n                 isCompleted: false\n             }\n             this.database.push(temp);\n\n         }\n\n    removeTodo(id) {\n\n            this.database.child(id).remove();\n        }\n\n\n    toggleAll() {\n             this.state.todos.map((todo) => {\n                if (todo.isCompleted === this.state.toggle) {\n                    var updateTodo = {\n                        \"id\": todo.id,\n                        \"title\": todo.title,\n                        \"isCompleted\": !this.state.toggle\n                    }\n                    this.database.child(todo.id).update(updateTodo);\n                }\n                this.setState({toggle: !this.state.toggle})\n\n            })\n        }\n\n\n\n\n    toggleTodo(todo) {\n\n            const temp = {\n                'id': todo.id,\n                'title': todo.title,\n                'isCompleted': !todo.isCompleted\n            }\n            this.database.child(todo.id).update(temp)\n        }\n\n    updateTodo(todo, updatedName) {\n            var updateTodo = {\n                \"id\": todo.id,\n                \"title\": updatedName,\n                \"isCompleted\": todo.isCompleted\n            }\n            this.database.child(todo.id).update(updateTodo);\n        }\n\n clearCompleted() {\n         this.state.todos.map((todo) => {\n             if (todo.isCompleted) {\n                 this.database.child(todo.id).remove();\n             }\n         })\n     }\n updateShow(str) {\n          this.setState({filter: str});\n                        }\n updateFilter() {\n\n                    var temp = []\n                        if (this.state.filter === \"all\") {\n                            return this.state.todos\n                        }\n                        else if (this.state.filter === \"active\") {\n                            this.state.todos.map((todo) => {\n                                if (!todo.isCompleted) {\n                                    temp.push(todo)\n\n                                }\n                            })\n                            return temp;\n                        }\n                        else if (this.state.filter === \"completed\") {\n                            this.state.todos.map((todo) => {\n                                if (todo.isCompleted) {\n                                    temp.push(todo)\n                                }\n                            })\n                            return temp;\n                        }\n\n                    }\n\n\n\n\n    render(){\n\n   let {todos} = this.state\n            let completedCount = 0\n            this.state.todos.forEach((todo) => {\n                if (todo.isCompleted) {\n                    completedCount++\n                }\n            })\n            let activeCount = this.state.todos.length - completedCount\n            let totalCount = this.state.todos.length\n\n\n        return(\n\n        <section className=\"todoform\">\n\n\n            <TodoForm  addTodo={this.addTodo} />\n\n                <section className=\"main\">\n                                    {todos.length > 0 &&\n                                    <input id=\"toggle-all\"\n                                           className=\"toggle-all\"\n                                           type=\"checkbox\"\n                                           checked={activeCount === 0}\n                                           onChange={this.toggleAll}\n\n                                    />}\n                                    <label htmlFor=\"toggle-all\"/>\n\n\n                                      <ul className=\"todo\">\n                                          {\n                                             this.updateFilter().map((todo) => {\n                                                 return (\n                                                         <Todo key={todo.id} task={todo}\n                                                                  removeTodo={this.removeTodo}\n                                                                  toggleTodo={this.toggleTodo}\n                                                                  updateTodo={this.updateTodo}\n                                                            />\n                                                        )\n                                                        })\n                                                        }\n                                            </ul>\n\n\n\n                                    </section>\n                                   {totalCount > 0 &&\n                                         <FooterBar\n                                            activeCount={activeCount}\n                                            updateShow={this.updateShow}\n                                            completedCount={completedCount}\n                                            clearCompleted={this.clearCompleted}\n                                        />\n                                            }\n                        </section>\n )}\n        }\nexport default App;\n"]},"metadata":{},"sourceType":"module"}