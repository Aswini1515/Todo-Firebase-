{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/Todo.js\";\nimport React, { Component } from 'react';\nimport * as cl from 'classnames';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false,\n      updatedTitle: ''\n    };\n    this.handleToggleTodo = this.handleToggleTodo.bind(this);\n    this.handleStartEditing = this.handleStartEditing.bind(this);\n    this.handleRemoveTodo = this.handleRemoveTodo.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleToggleTodo(todo) {\n    this.props.toggleTodo(todo);\n  }\n\n  handleRemoveTodo(id) {\n    this.props.removeTodo(id);\n  }\n\n  handleStartEditing(e) {\n    this.setState({\n      editing: true,\n      updatedTitle: this.props.task.title\n    });\n  }\n\n  handleSubmit() {\n    this.props.updateTodo(this.props.task, this.state.updatedTitle);\n    this.setState({\n      editing: false\n    });\n  }\n\n  handleKeyDown(e) {\n    if (e.key === 'Escape') {\n      this.setState({\n        editing: false\n      });\n    } else if (e.key === 'Enter') {\n      this.handleSubmit();\n    }\n  }\n\n  handleInput(e) {\n    this.setState({\n      updatedTitle: e.target.value\n    });\n  }\n\n  render() {\n    let _this$state = this.state,\n        editing = _this$state.editing,\n        updatedTitle = _this$state.updatedTitle;\n    return React.createElement(\"li\", {\n      className: cl({\n        completed: this.props.task.isCompleted,\n        editing\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"toggle\",\n      type: \"checkbox\",\n      onChange: () => this.handleToggleTodo(this.props.task),\n      checked: this.props.task.isCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      onDoubleClick: this.handleStartEditing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.props.task.title), React.createElement(\"button\", {\n      className: \"destroy\",\n      onClick: () => this.handleRemoveTodo(this.props.task.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      className: \"edit\",\n      value: updatedTitle,\n      onBlur: this.handleSubmit,\n      onKeyDown: this.handleKeyDown,\n      onChange: this.handleInput,\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Todo;","map":{"version":3,"sources":["/usr/src/app/src/components/Todo.js"],"names":["React","Component","cl","Todo","constructor","props","state","editing","updatedTitle","handleToggleTodo","bind","handleStartEditing","handleRemoveTodo","handleSubmit","handleKeyDown","handleInput","todo","toggleTodo","id","removeTodo","e","setState","task","title","updateTodo","key","target","value","render","completed","isCompleted"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as cl from 'classnames'\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false,\n            updatedTitle: ''\n        }\n        this.handleToggleTodo = this.handleToggleTodo.bind(this);\n        this.handleStartEditing=this.handleStartEditing.bind(this);\n        this.handleRemoveTodo = this.handleRemoveTodo.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n    handleToggleTodo(todo) {\n            this.props.toggleTodo(todo);\n        }\n\n     handleRemoveTodo(id) {\n                this.props.removeTodo(id);\n            }\n\n    handleStartEditing(e) {\n            this.setState({\n                editing: true,\n                updatedTitle: this.props.task.title\n            })\n        }\n\n    handleSubmit() {\n            this.props.updateTodo(this.props.task,this.state.updatedTitle)\n            this.setState({\n                editing: false\n            })\n        }\n\n        handleKeyDown(e) {\n            if (e.key === 'Escape') {\n                this.setState({\n                    editing: false\n                })\n            } else if (e.key === 'Enter') {\n                this.handleSubmit()\n            }\n        }\n\n        handleInput(e) {\n            this.setState({\n                updatedTitle: e.target.value\n            })\n        }\n\n render() {\n        let {editing, updatedTitle} = this.state\n        return (\n            <li className={cl({completed: this.props.task.isCompleted, editing})}>\n                <div className=\"view\">\n                    <input className=\"toggle\"\n                           type=\"checkbox\"\n                           onChange={() => this.handleToggleTodo(this.props.task)}\n                           checked={this.props.task.isCompleted}\n                    />\n                    <label onDoubleClick={this.handleStartEditing}>\n                        {this.props.task.title}\n                    </label>\n                    <button className=\"destroy\"\n                            onClick={() => this.handleRemoveTodo(this.props.task.id)}\n                    />\n                </div>\n                <input className=\"edit\"\n                       value={updatedTitle}\n                       onBlur={this.handleSubmit}\n                       onKeyDown={this.handleKeyDown}\n                       onChange={this.handleInput}\n                       type=\"text\"\n                />\n            </li>\n\n\n        )\n    }\n}\nexport default Todo;"]},"metadata":{},"sourceType":"module"}