{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/FooterBar.js","config/config.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","state","newTitle","handleUserInput","bind","writeTodo","e","this","setState","target","value","key","keyCode","which","tittle","replace","length","addTodo","className","placeholder","onChange","onKeyPress","React","Todo","editing","updatedTitle","handleToggleTodo","handleStartEditing","handleRemoveTodo","handleSubmit","handleKeyDown","handleInput","todo","toggleTodo","id","removeTodo","task","title","updateTodo","cl","completed","isCompleted","type","checked","onDoubleClick","onClick","onBlur","onKeyDown","Component","FooterBar","activeCount","href","updateShow","completedCount","clearCompleted","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","updateFilter","toggleAll","app","firebase","initializeApp","database","ref","child","todos","toggle","filter","tasks","on","snap","forEach","childSnap","val","push","taskName","temp","remove","map","update","updatedName","str","totalCount","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7308bf8.chunk.js","sourcesContent":["import * as React from 'react';\n\nclass TodoForm extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n                    newTitle: '',\n                };\n        this.handleUserInput = this.handleUserInput.bind(this);\n        this.writeTodo = this.writeTodo.bind(this);\n\n    }\n    handleUserInput(e) {\n            this.setState({\n                    newTitle: e.target.value\n            })\n        }\n\n    writeTodo(e) {\n            var key = e.keyCode || e.which;\n\n            var tittle = this.state.newTitle\n            if (key === 13 && tittle.replace(/\\s*/,'').length!==0) {\n                this.props.addTodo(this.state.newTitle)\n                this.setState({\n                    newTitle: '',\n                })\n            }\n            }\nrender(){\n    return(\n                    <header className=\"header\">\n                    <h1>Todos</h1>\n                    <input className='new-todo'\n                           placeholder=\"What needs to be done? \"\n                           value={this.state.newTitle}\n                           onChange={this.handleUserInput}\n                           onKeyPress={this.writeTodo}/>\n                    </header>\n)\n}\n}\nexport default TodoForm;","import React, {Component} from 'react';\nimport * as cl from 'classnames'\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false,\n            updatedTitle: ''\n        }\n        this.handleToggleTodo = this.handleToggleTodo.bind(this);\n        this.handleStartEditing=this.handleStartEditing.bind(this);\n        this.handleRemoveTodo = this.handleRemoveTodo.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n    handleToggleTodo(todo) {\n            this.props.toggleTodo(todo);\n        }\n\n     handleRemoveTodo(id) {\n                this.props.removeTodo(id);\n            }\n\n    handleStartEditing(e) {\n            this.setState({\n                editing: true,\n                updatedTitle: this.props.task.title\n            })\n        }\n\n    handleSubmit() {\n            this.props.updateTodo(this.props.task,this.state.updatedTitle)\n            this.setState({\n                editing: false\n            })\n        }\n\n        handleKeyDown(e) {\n            if (e.key === 'Escape') {\n                this.setState({\n                    editing: false\n                })\n            } else if (e.key === 'Enter') {\n                this.handleSubmit()\n            }\n        }\n\n        handleInput(e) {\n            this.setState({\n                updatedTitle: e.target.value\n            })\n        }\n\n render() {\n        let {editing, updatedTitle} = this.state\n        return (\n            <li className={cl({completed: this.props.task.isCompleted, editing})}>\n                <div className=\"view\">\n                    <input className=\"toggle\"\n                           type=\"checkbox\"\n                           onChange={() => this.handleToggleTodo(this.props.task)}\n                           checked={this.props.task.isCompleted}\n                    />\n                    <label onDoubleClick={this.handleStartEditing}>\n                        {this.props.task.title}\n                    </label>\n                    <button className=\"destroy\"\n                            onClick={() => this.handleRemoveTodo(this.props.task.id)}\n                    />\n                </div>\n                <input className=\"edit\"\n                       value={updatedTitle}\n                       onBlur={this.handleSubmit}\n                       onKeyDown={this.handleKeyDown}\n                       onChange={this.handleInput}\n                       type=\"text\"\n                />\n            </li>\n\n\n        )\n    }\n}\nexport default Todo;","import * as React from \"react\";\n\nclass FooterBar extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    render () {\n        return (\n            <footer className=\"footer\">\n                {this.props.activeCount > 0 && <span className=\"todo-count\">\n                        <strong>{this.props.activeCount}</strong> item{this.props.activeCount > 1 && 's'} left</span>}\n                <ul className=\"filters\">\n                    <li>\n                        <a href={\"#/\"} onClick={this.props.updateShow.bind(this, \"all\")}>All</a>\n                    </li>\n                    <li>\n                        <a href={\"#/active\"} onClick={this.props.updateShow.bind(this, \"active\")}>Active</a>\n                    </li>\n                    <li>\n                        <a href={\"#/completed\"} onClick={this.props.updateShow.bind(this, \"completed\")}>Completed</a>\n                    </li>\n                </ul>\n                {this.props.completedCount > 0 &&\n                <button className=\"clear-completed\" onClick={this.props.clearCompleted}>Clear completed</button>}\n            </footer>\n        )\n    }\n}\n\nexport default FooterBar;","export const DB_CONFIG= {\n                             apiKey: \"AIzaSyBtDsx3WlNGf6dNwyLO3OeO94L-x5Nuyvs\",\n                             authDomain: \"todofirebasee.firebaseapp.com\",\n                             databaseURL: \"https://todofirebasee.firebaseio.com\",\n                             projectId: \"todofirebasee\",\n                             storageBucket: \"todofirebasee.appspot.com\",\n                             messagingSenderId: \"713167394611\",\n                             appId: \"1:713167394611:web:fc7d1689c8be397cc25046\",\n                             measurementId: \"G-6T3FMEC827\"\n                           };","import React from 'react';\nimport TodoForm from './components/TodoForm'\nimport Todo from './components/Todo'\nimport FooterBar from './components/FooterBar'\nimport { DB_CONFIG } from './config/config'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\nimport './App.css'\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTodo = this.addTodo.bind(this);\n        this.updateFilter=this.updateFilter.bind(this);\n        this.removeTodo=this.removeTodo.bind(this);\n        this.toggleAll=this.toggleAll.bind(this);\n        this.toggleTodo=this.toggleTodo.bind(this);\n        this.updateTodo=this.updateTodo.bind(this);\n        this.clearCompleted=this.clearCompleted.bind(this);\n        this.updateShow=this.updateShow.bind(this);\n        this.app = firebase.initializeApp(DB_CONFIG);\n        this.database = this.app.database().ref().child('todos');\n        this.state = {\n                    todos: [],\n\n                    toggle: false,\n                    filter: \"all\"\n                    }\n\n    }\n        componentWillMount() {\n                var tasks = [];\n                this.database.on('value', (snap) => {\n\n                        snap.forEach((childSnap) => {\n\n                            var task = {\n                                'id': childSnap.key,\n                                'title': childSnap.val().title,\n                                'isCompleted': childSnap.val().isCompleted\n                            }\n                            tasks.push(task)\n                        });\n                        this.setState({todos: tasks});\n\n                        tasks = [];\n                    }\n                )\n\n    }\n\n\n\n    addTodo(taskName) {\n             const temp = {\n                 title: taskName,\n                 isCompleted: false\n             }\n             this.database.push(temp);\n\n         }\n\n    removeTodo(id) {\n\n            this.database.child(id).remove();\n        }\n\n\n    toggleAll() {\n             this.state.todos.map((todo) => {\n                if (todo.isCompleted === this.state.toggle) {\n                    var updateTodo = {\n                        \"id\": todo.id,\n                        \"title\": todo.title,\n                        \"isCompleted\": !this.state.toggle\n                    }\n                    this.database.child(todo.id).update(updateTodo);\n                }\n                this.setState({toggle: !this.state.toggle})\n\n            })\n        }\n\n\n\n\n    toggleTodo(todo) {\n\n            const temp = {\n                'id': todo.id,\n                'title': todo.title,\n                'isCompleted': !todo.isCompleted\n            }\n            this.database.child(todo.id).update(temp)\n        }\n\n    updateTodo(todo, updatedName) {\n            var updateTodo = {\n                \"id\": todo.id,\n                \"title\": updatedName,\n                \"isCompleted\": todo.isCompleted\n            }\n            this.database.child(todo.id).update(updateTodo);\n        }\n\n clearCompleted() {\n         this.state.todos.map((todo) => {\n             if (todo.isCompleted) {\n                 this.database.child(todo.id).remove();\n             }\n         })\n     }\n updateShow(str) {\n          this.setState({filter: str});\n                        }\n updateFilter() {\n\n                    var temp = []\n                        if (this.state.filter === \"all\") {\n                            return this.state.todos\n                        }\n                        else if (this.state.filter === \"active\") {\n                            this.state.todos.map((todo) => {\n                                if (!todo.isCompleted) {\n                                    temp.push(todo)\n\n                                }\n                            })\n                            return temp;\n                        }\n                        else if (this.state.filter === \"completed\") {\n                            this.state.todos.map((todo) => {\n                                if (todo.isCompleted) {\n                                    temp.push(todo)\n                                }\n                            })\n                            return temp;\n                        }\n\n                    }\n\n\n\n\n    render(){\n\n   let {todos} = this.state\n            let completedCount = 0\n            this.state.todos.forEach((todo) => {\n                if (todo.isCompleted) {\n                    completedCount++\n                }\n            })\n            let activeCount = this.state.todos.length - completedCount\n            let totalCount = this.state.todos.length\n\n\n        return(\n\n        <section className=\"todoform\">\n\n\n            <TodoForm  addTodo={this.addTodo} />\n\n                <section className=\"main\">\n                                    {todos.length > 0 &&\n                                    <input id=\"toggle-all\"\n                                           className=\"toggle-all\"\n                                           type=\"checkbox\"\n                                           checked={activeCount === 0}\n                                           onChange={this.toggleAll}\n\n                                    />}\n                                    <label htmlFor=\"toggle-all\"/>\n\n\n                                      <ul className=\"todo\">\n                                          {\n                                             this.updateFilter().map((todo) => {\n                                                 return (\n                                                         <Todo key={todo.id} task={todo}\n                                                                  removeTodo={this.removeTodo}\n                                                                  toggleTodo={this.toggleTodo}\n                                                                  updateTodo={this.updateTodo}\n                                                            />\n                                                        )\n                                                        })\n                                                        }\n                                            </ul>\n\n\n\n                                    </section>\n                                   {totalCount > 0 &&\n                                         <FooterBar\n                                            activeCount={activeCount}\n                                            updateShow={this.updateShow}\n                                            completedCount={completedCount}\n                                            clearCompleted={this.clearCompleted}\n                                        />\n                                            }\n                        </section>\n )}\n        }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}